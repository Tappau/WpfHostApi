<Window x:Class="WpfHostApi.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfHostApi"
        xmlns:bh="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:viewModels="clr-namespace:WpfHostApi.ViewModels"
        xmlns:core="clr-namespace:WpfHostApi.Core"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800"
        ShowInTaskbar="{Binding ShowInTaskbar}"
        WindowState="{Binding WindowState}"
        >
    <Window.DataContext>
        <viewModels:MainWindowViewModel/>
    </Window.DataContext>
    
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <core:NotifyIconWrapper Grid.Row="0" NotifyRequest="{Binding NotifyRequest}">
            <bh:Interaction.Triggers>
                <bh:EventTrigger EventName="OpenSelected">
                    <bh:InvokeCommandAction Command="{Binding OpenCommand}"/>
                </bh:EventTrigger>
                <bh:EventTrigger EventName="ExitSelected">
                    <bh:InvokeCommandAction Command="{Binding ExitCommand}"/>
                </bh:EventTrigger>
            </bh:Interaction.Triggers>
        </core:NotifyIconWrapper>
        <Button Grid.Row="0" Content="Notify" Margin="10" Width="100" Height="50" Command="{Binding NotifyCommand}"/>
        <StackPanel Margin="16" Grid.Row="1">
            <TextBlock Margin="0,0,0,16"
                       Text="Global exception handler sample" />
            <Button Margin="0,0,0,8"
                    Click="RaiseException"
                    Content="Throw Exception" />

            <Button Margin="0,0,0,8"
                    Click="RaiseExceptionOnUnobservedTask"
                    Content="Raise exception on unawaited Task" />
            <Button Margin="0,0,0,8"
                    Click="RaiseExceptionOnThread"
                    Content="Throw on another Thread (app will crash)" />
            <Button Margin="0,0,0,8"
                    Click="RaiseExceptionOnThreadSafe"
                    Content="Throw on another Thread handled" />
        </StackPanel>
    </Grid>
    <bh:Interaction.Triggers>
        <bh:EventTrigger EventName="Loaded">
            <bh:InvokeCommandAction Command="{Binding LoadedCommand}"/>
        </bh:EventTrigger>
        <bh:EventTrigger EventName="Closing">
            <bh:InvokeCommandAction Command="{Binding ClosingCommand}" PassEventArgsToCommand="True"/>
        </bh:EventTrigger>
    </bh:Interaction.Triggers>
</Window>
